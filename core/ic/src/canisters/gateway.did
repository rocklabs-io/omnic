type ChainConfig = record {
  rpc_urls : vec text;
  gateway_addr : principal;
  omnic_addr : text;
  chain_id : nat32;
  chain_type : ChainType;
  omnic_start_block : nat64;
};
type ChainState = record {
  next_index : nat32;
  canister_addr : text;
  config : ChainConfig;
  roots : vec vec nat8;
};
type ChainType = variant { Evm; Solana; Cosmos };
type Result = variant { Ok : bool; Err : text };
type Result_1 = variant { Ok : text; Err : text };
type Result_2 = variant { Ok : ChainState; Err : text };
type Result_3 = variant { Ok : nat64; Err : text };
type Result_4 = variant { Ok : StateInfo; Err : text };
type Result_5 = variant { Ok : nat32; Err : text };
type StateInfo = record {
  fetch_root_period : nat64;
  owners : vec principal;
  fetch_roots_period : nat64;
  query_rpc_number : nat64;
};
service : () -> {
  add_chain : (nat32, vec text, text, nat64) -> (Result);
  add_owner : (principal) -> ();
  add_urls : (vec text) -> (Result);
  fetch_root : (nat64) -> (Result_1);
  get_chain : () -> (Result_2) query;
  get_gas_price : () -> (Result_3);
  get_info : () -> (Result_4) query;
  get_latest_root : () -> (text) query;
  get_logs : () -> (vec text) query;
  get_next_index : () -> (Result_5) query;
  get_tx_count : (text) -> (Result_3);
  is_valid : (vec nat8, vec vec nat8, nat32) -> (Result) query;
  remove_owner : (principal) -> ();
  set_fetch_period : (nat64, nat64) -> (Result);
  set_next_index : (nat32) -> (Result);
  set_rpc_number : (nat64) -> (Result);
}