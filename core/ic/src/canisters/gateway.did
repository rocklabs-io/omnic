type ChainConfig = record {
  rpc_urls : vec text;
  gateway_addr : principal;
  omnic_addr : text;
  chain_id : nat32;
  max_cache_msg : nat64;
  max_waiting_time : nat64;
  chain_type : ChainType;
  omnic_start_block : nat64;
};
type ChainState = record {
  events : vec record { vec nat8; MessageStable };
  nonce : vec record { text; nat32 };
  canister_addr : text;
  config : ChainConfig;
  last_scanned_block : nat64;
};
type ChainType = variant { Evm; Solana; Cosmos };
type MessageStable = record {
  t : nat8;
  destination : nat32;
  body : vec nat8;
  origin : nat32;
  recipient : vec nat8;
  sender : vec nat8;
  nonce : nat64;
};
type Result = variant { Ok : bool; Err : text };
type Result_1 = variant { Ok : ChainState; Err : text };
type Result_2 = variant { Ok : nat64; Err : text };
type Result_3 = variant { Ok : StateInfo; Err : text };
type StateInfo = record {
  fetch_msg_period : nat64;
  owners : vec principal;
  proxy_addr : principal;
  fetch_msgs_period : nat64;
  query_rpc_number : nat64;
};
service : (principal) -> {
  add_chain : (nat32, vec text, text, nat64) -> (Result);
  add_owner : (principal) -> ();
  add_urls : (vec text) -> (Result);
  get_chain : () -> (Result_1) query;
  get_gas_price : () -> (Result_2);
  get_info : () -> (Result_3) query;
  get_logs : () -> (vec text) query;
  get_tx_count : (text) -> (Result_2);
  remove_owner : (principal) -> ();
  set_fetch_period : (nat64, nat64) -> (Result);
  set_rpc_number : (nat64) -> (Result);
}